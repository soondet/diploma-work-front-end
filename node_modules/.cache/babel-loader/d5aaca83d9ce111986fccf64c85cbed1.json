{"ast":null,"code":"import{REGISTER_SUCCESS,REGISTER_FAIL,LOGIN_SUCCESS,LOGIN_FAIL,LOGOUT,SET_MESSAGE}from\"./types\";import AuthService from\"../services/auth.service\";export var register=function register(username,email,password){return function(dispatch){return AuthService.register(username,email,password).then(function(response){dispatch({type:REGISTER_SUCCESS});dispatch({type:SET_MESSAGE,payload:response.data.message});return Promise.resolve();},function(error){var message=error.response&&error.response.data&&error.response.data.message||error.message||error.toString();dispatch({type:REGISTER_FAIL});dispatch({type:SET_MESSAGE,payload:message});return Promise.reject();});};};export var login=function login(username,password){return function(dispatch){return AuthService.login(username,password).then(function(data){dispatch({type:LOGIN_SUCCESS,payload:{user:data}});return Promise.resolve();},function(error){var message=error.response&&error.response.data&&error.response.data.message||error.message||error.toString();dispatch({type:LOGIN_FAIL});dispatch({type:SET_MESSAGE,payload:message});return Promise.reject();});};};export var logout=function logout(){return function(dispatch){AuthService.logout();dispatch({type:LOGOUT});};};","map":{"version":3,"sources":["D:/Дипломка/code/diploma-work-front-end/src/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","username","email","password","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","login","user","logout"],"mappings":"AAAA,OACEA,gBADF,CAEEC,aAFF,CAGEC,aAHF,CAIEC,UAJF,CAKEC,MALF,CAMEC,WANF,KAOO,SAPP,CASA,MAAOC,CAAAA,WAAP,KAAwB,0BAAxB,CAEA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,QAAD,CAAWC,KAAX,CAAkBC,QAAlB,QAA+B,UAACC,QAAD,CAAc,CACnE,MAAOL,CAAAA,WAAW,CAACC,QAAZ,CAAqBC,QAArB,CAA+BC,KAA/B,CAAsCC,QAAtC,EAAgDE,IAAhD,CACL,SAACC,QAAD,CAAc,CACZF,QAAQ,CAAC,CACPG,IAAI,CAAEd,gBADC,CAAD,CAAR,CAIAW,QAAQ,CAAC,CACPG,IAAI,CAAET,WADC,CAEPU,OAAO,CAAEF,QAAQ,CAACG,IAAT,CAAcC,OAFhB,CAAD,CAAR,CAKA,MAAOC,CAAAA,OAAO,CAACC,OAAR,EAAP,CACD,CAZI,CAaL,SAACC,KAAD,CAAW,CACT,GAAMH,CAAAA,OAAO,CACVG,KAAK,CAACP,QAAN,EACCO,KAAK,CAACP,QAAN,CAAeG,IADhB,EAECI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFtB,EAGAG,KAAK,CAACH,OAHN,EAIAG,KAAK,CAACC,QAAN,EALF,CAOAV,QAAQ,CAAC,CACPG,IAAI,CAAEb,aADC,CAAD,CAAR,CAIAU,QAAQ,CAAC,CACPG,IAAI,CAAET,WADC,CAEPU,OAAO,CAAEE,OAFF,CAAD,CAAR,CAKA,MAAOC,CAAAA,OAAO,CAACI,MAAR,EAAP,CACD,CA/BI,CAAP,CAiCD,CAlCuB,EAAjB,CAoCP,MAAO,IAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACf,QAAD,CAAWE,QAAX,QAAwB,UAACC,QAAD,CAAc,CACzD,MAAOL,CAAAA,WAAW,CAACiB,KAAZ,CAAkBf,QAAlB,CAA4BE,QAA5B,EAAsCE,IAAtC,CACL,SAACI,IAAD,CAAU,CACRL,QAAQ,CAAC,CACPG,IAAI,CAAEZ,aADC,CAEPa,OAAO,CAAE,CAAES,IAAI,CAAER,IAAR,CAFF,CAAD,CAAR,CAKA,MAAOE,CAAAA,OAAO,CAACC,OAAR,EAAP,CACD,CARI,CASL,SAACC,KAAD,CAAW,CACT,GAAMH,CAAAA,OAAO,CACVG,KAAK,CAACP,QAAN,EACCO,KAAK,CAACP,QAAN,CAAeG,IADhB,EAECI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFtB,EAGAG,KAAK,CAACH,OAHN,EAIAG,KAAK,CAACC,QAAN,EALF,CAOAV,QAAQ,CAAC,CACPG,IAAI,CAAEX,UADC,CAAD,CAAR,CAIAQ,QAAQ,CAAC,CACPG,IAAI,CAAET,WADC,CAEPU,OAAO,CAAEE,OAFF,CAAD,CAAR,CAKA,MAAOC,CAAAA,OAAO,CAACI,MAAR,EAAP,CACD,CA3BI,CAAP,CA6BD,CA9BoB,EAAd,CAgCP,MAAO,IAAMG,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,SAAM,UAACd,QAAD,CAAc,CACxCL,WAAW,CAACmB,MAAZ,GAEAd,QAAQ,CAAC,CACPG,IAAI,CAAEV,MADC,CAAD,CAAR,CAGD,CANqB,EAAf","sourcesContent":["import {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  SET_MESSAGE,\r\n} from \"./types\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nexport const register = (username, email, password) => (dispatch) => {\r\n  return AuthService.register(username, email, password).then(\r\n    (response) => {\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: response.data.message,\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const login = (username, password) => (dispatch) => {\r\n  return AuthService.login(username, password).then(\r\n    (data) => {\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: { user: data },\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  AuthService.logout();\r\n\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}