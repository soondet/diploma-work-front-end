{"version":3,"sources":["reducers/auth.js","reducers/message.js","reducers/index.js","actions/types.js","store.js","services/auth.service.js","components/login.component.js","actions/auth.js","components/register.component.js","services/auth-header.js","services/user.service.js","services/schedule.service.js","services/city.service.js","services/station.service.js","services/address.service.js","components/index.js","components/home.component.js","components/profile.component.js","components/board-user.component.js","components/board-moderator.component.js","components/board-admin.component.js","helpers/history.js","App.js","actions/message.js","serviceWorker.js","index.js"],"names":["user","JSON","parse","localStorage","getItem","initialState","isLoggedIn","combineReducers","auth","state","action","type","payload","message","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","API_URL","username","password","axios","post","then","response","data","accessToken","setItem","stringify","removeItem","email","required","value","className","role","Login","props","handleLogin","bind","onChangeUsername","onChangePassword","loading","e","this","setState","target","preventDefault","form","validateAll","dispatch","history","checkBtn","context","_errors","length","AuthService","login","Promise","resolve","error","toString","reject","push","window","location","reload","catch","to","src","alt","onSubmit","ref","c","htmlFor","name","onChange","validations","disabled","style","display","Component","connect","isEmail","vusername","vpassword","Register","handleRegister","onChangeEmail","successful","register","authHeader","Authorization","get","headers","filters","addressFrom","addressTo","cityId","CheckoutForm","stripe","useStripe","elements","useElements","handleSubmit","event","a","createPaymentMethod","card","getElement","CardElement","paymentMethod","id","amount","console","log","maxWidth","margin","stripePromise","loadStripe","Index","React","useState","status","setStatus","success","Home","DatePicker","RangePicker","content","stationCities","cities","addressesFrom","addressesTo","date","cityFrom","cityTo","scheduleItems","onOkDatePicker","onChangeCityFrom","onChangeAddressFrom","onChangeCityTo","onChangeAddressTo","onSearchSchedule","onChangeDatePicker","UserService","getPublicContent","CityService","getCities","moment","toISOString","utc","format","dateString","filter","cityName","AddressService","getAddressByCity","map","addressName","ScheduleService","getSchedule","index","showSearch","width","placeholder","optionFilterProp","filterOption","input","option","children","toLowerCase","indexOf","Option","key","onClick","pagination","page","pageSize","size","bordered","dataSource","renderItem","item","Item","scheduleStatus","scheduleDate","price","routeDistance","busStateNumber","busAvailability","busAvailableSeatNumber","busModelName","busModelSeatNumber","addresses","element","sequenceNumber","Profile","currentUser","substring","substr","roles","BoardUser","getUserBoard","BoardModerator","getModeratorBoard","BoardAdmin","getAdminBoard","createBrowserHistory","App","logOut","showModeratorBoard","showAdminBoard","undefined","listen","includes","logout","href","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d2e4ab9.chunk.js","sourcesContent":["import {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n} from \"../actions/types\";\r\n\r\nconst user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\nconst initialState = user\r\n  ? { isLoggedIn: true, user }\r\n  : { isLoggedIn: false, user: null };\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case REGISTER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n      };\r\n    case REGISTER_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n      };\r\n    case LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: true,\r\n        user: payload.user,\r\n      };\r\n    case LOGIN_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        user: null,\r\n      };\r\n    case LOGOUT:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        user: null,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { SET_MESSAGE, CLEAR_MESSAGE } from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case SET_MESSAGE:\r\n      return { message: payload };\r\n\r\n    case CLEAR_MESSAGE:\r\n      return { message: \"\" };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport auth from \"./auth\";\r\nimport message from \"./message\";\r\n\r\nexport default combineReducers({\r\n  auth,\r\n  message,\r\n});\r\n","export const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\r\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\r\nexport const LOGOUT = \"LOGOUT\";\r\n\r\nexport const SET_MESSAGE = \"SET_MESSAGE\";\r\nexport const CLEAR_MESSAGE = \"CLEAR_MESSAGE\";\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import axios from \"axios\";\r\n\r\nconst API_URL = \"http://195.2.67.225:8080/api/auth/\";\r\n\r\nclass AuthService {\r\n  login(username, password) {\r\n    return axios\r\n      .post(API_URL + \"signin\", { username, password })\r\n      .then((response) => {\r\n        if (response.data.accessToken) {\r\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n        }\r\n\r\n        return response.data;\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(\"user\");\r\n  }\r\n\r\n  register(username, email, password) {\r\n    return axios.post(API_URL + \"signup\", {\r\n      username,\r\n      email,\r\n      password,\r\n    });\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { login } from \"../actions/auth\";\r\n\r\nconst required = (value) => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This field is required!\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleLogin = this.handleLogin.bind(this);\r\n    this.onChangeUsername = this.onChangeUsername.bind(this);\r\n    this.onChangePassword = this.onChangePassword.bind(this);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      loading: false,\r\n    };\r\n  }\r\n\r\n  onChangeUsername(e) {\r\n    this.setState({\r\n      username: e.target.value,\r\n    });\r\n  }\r\n\r\n  onChangePassword(e) {\r\n    this.setState({\r\n      password: e.target.value,\r\n    });\r\n  }\r\n\r\n  handleLogin(e) {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n\r\n    this.form.validateAll();\r\n\r\n    const { dispatch, history } = this.props;\r\n\r\n    if (this.checkBtn.context._errors.length === 0) {\r\n      dispatch(login(this.state.username, this.state.password))\r\n        .then(() => {\r\n          history.push(\"/profile\");\r\n          window.location.reload();\r\n        })\r\n        .catch(() => {\r\n          this.setState({\r\n            loading: false\r\n          });\r\n        });\r\n    } else {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { isLoggedIn, message } = this.props;\r\n\r\n    if (isLoggedIn) {\r\n      return <Redirect to=\"/profile\" />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"col-md-12\">\r\n        <div className=\"card card-container\">\r\n          <img\r\n            src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n            alt=\"profile-img\"\r\n            className=\"profile-img-card\"\r\n          />\r\n\r\n          <Form\r\n            onSubmit={this.handleLogin}\r\n            ref={(c) => {\r\n              this.form = c;\r\n            }}\r\n          >\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"username\">Username</label>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"username\"\r\n                value={this.state.username}\r\n                onChange={this.onChangeUsername}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"password\">Password</label>\r\n              <Input\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                name=\"password\"\r\n                value={this.state.password}\r\n                onChange={this.onChangePassword}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <button\r\n                className=\"btn btn-primary btn-block\"\r\n                disabled={this.state.loading}\r\n              >\r\n                {this.state.loading && (\r\n                  <span className=\"spinner-border spinner-border-sm\"></span>\r\n                )}\r\n                <span>Login</span>\r\n              </button>\r\n            </div>\r\n\r\n            {message && (\r\n              <div className=\"form-group\">\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n            )}\r\n            <CheckButton\r\n              style={{ display: \"none\" }}\r\n              ref={(c) => {\r\n                this.checkBtn = c;\r\n              }}\r\n            />\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { isLoggedIn } = state.auth;\r\n  const { message } = state.message;\r\n  return {\r\n    isLoggedIn,\r\n    message\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Login);\r\n","import {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  SET_MESSAGE,\r\n} from \"./types\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nexport const register = (username, email, password) => (dispatch) => {\r\n  return AuthService.register(username, email, password).then(\r\n    (response) => {\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: response.data.message,\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const login = (username, password) => (dispatch) => {\r\n  return AuthService.login(username, password).then(\r\n    (data) => {\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: { user: data },\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  AuthService.logout();\r\n\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport { isEmail } from \"validator\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { register } from \"../actions/auth\";\r\n\r\nconst required = (value) => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This field is required!\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst email = (value) => {\r\n  if (!isEmail(value)) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This is not a valid email.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst vusername = (value) => {\r\n  if (value.length < 3 || value.length > 20) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        The username must be between 3 and 20 characters.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst vpassword = (value) => {\r\n  if (value.length < 6 || value.length > 40) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        The password must be between 6 and 40 characters.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleRegister = this.handleRegister.bind(this);\r\n    this.onChangeUsername = this.onChangeUsername.bind(this);\r\n    this.onChangeEmail = this.onChangeEmail.bind(this);\r\n    this.onChangePassword = this.onChangePassword.bind(this);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      successful: false,\r\n    };\r\n  }\r\n\r\n  onChangeUsername(e) {\r\n    this.setState({\r\n      username: e.target.value,\r\n    });\r\n  }\r\n\r\n  onChangeEmail(e) {\r\n    this.setState({\r\n      email: e.target.value,\r\n    });\r\n  }\r\n\r\n  onChangePassword(e) {\r\n    this.setState({\r\n      password: e.target.value,\r\n    });\r\n  }\r\n\r\n  handleRegister(e) {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      successful: false,\r\n    });\r\n\r\n    this.form.validateAll();\r\n\r\n    if (this.checkBtn.context._errors.length === 0) {\r\n      this.props\r\n        .dispatch(\r\n          register(this.state.username, this.state.email, this.state.password)\r\n        )\r\n        .then(() => {\r\n          this.setState({\r\n            successful: true,\r\n          });\r\n        })\r\n        .catch(() => {\r\n          this.setState({\r\n            successful: false,\r\n          });\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { message } = this.props;\r\n\r\n    return (\r\n      <div className=\"col-md-12\">\r\n        <div className=\"card card-container\">\r\n          <img\r\n            src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n            alt=\"profile-img\"\r\n            className=\"profile-img-card\"\r\n          />\r\n\r\n          <Form\r\n            onSubmit={this.handleRegister}\r\n            ref={(c) => {\r\n              this.form = c;\r\n            }}\r\n          >\r\n            {!this.state.successful && (\r\n              <div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"username\">Username</label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"username\"\r\n                    value={this.state.username}\r\n                    onChange={this.onChangeUsername}\r\n                    validations={[required, vusername]}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"email\">Email</label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"email\"\r\n                    value={this.state.email}\r\n                    onChange={this.onChangeEmail}\r\n                    validations={[required, email]}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"password\">Password</label>\r\n                  <Input\r\n                    type=\"password\"\r\n                    className=\"form-control\"\r\n                    name=\"password\"\r\n                    value={this.state.password}\r\n                    onChange={this.onChangePassword}\r\n                    validations={[required, vpassword]}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <button className=\"btn btn-primary btn-block\">Sign Up</button>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {message && (\r\n              <div className=\"form-group\">\r\n                <div className={ this.state.successful ? \"alert alert-success\" : \"alert alert-danger\" } role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n            )}\r\n            <CheckButton\r\n              style={{ display: \"none\" }}\r\n              ref={(c) => {\r\n                this.checkBtn = c;\r\n              }}\r\n            />\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { message } = state.message;\r\n  return {\r\n    message,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Register);\r\n","export default function authHeader() {\r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n  if (user && user.accessToken) {\r\n    // For Spring Boot back-end\r\n    return { Authorization: \"Bearer \" + user.accessToken };\r\n\r\n    // for Node.js Express back-end\r\n    // return { \"x-access-token\": user.accessToken };\r\n  } else {\r\n    return {};\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"http://195.2.67.225:8080/api/test/\";\r\n\r\nclass UserService {\r\n  getPublicContent() {\r\n    return axios.get(API_URL + \"all\");\r\n  }\r\n\r\n  getUserBoard() {\r\n    return axios.get(API_URL + \"user\", { headers: authHeader() });\r\n  }\r\n\r\n  getModeratorBoard() {\r\n    return axios.get(API_URL + \"mod\", { headers: authHeader() });\r\n  }\r\n\r\n  getAdminBoard() {\r\n    return axios.get(API_URL + \"admin\", { headers: authHeader() });\r\n  }\r\n}\r\n\r\nexport default new UserService();\r\n","import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"http://195.2.67.225:8080/api/schedule/\";\r\n\r\nclass ScheduleService {\r\n  getSchedule(filters) {\r\n    return axios.get(\r\n      API_URL +\r\n        `address?addressFromId=${filters.addressFrom}&addressToId=${filters.addressTo}`\r\n    );\r\n  }\r\n}\r\n\r\nexport default new ScheduleService();\r\n","import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"http://195.2.67.225:8080/api/city/\";\r\n\r\nclass CityService {\r\n  getCities() {\r\n    return axios.get(API_URL + \"get\");\r\n  }\r\n  \r\n}\r\n\r\nexport default new CityService();\r\n","import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"http://195.2.67.225:8080/api/station/\";\r\n\r\nclass StationService {\r\n  getStationCities() {\r\n    return axios.get(API_URL + \"cities\");\r\n  }\r\n  \r\n}\r\n\r\nexport default new StationService();\r\n","import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"http://195.2.67.225:8080/api/address/\";\r\n\r\nclass AddressService {\r\n  getAddressByCity(cityId) {\r\n    return axios.get(API_URL + `city?cityId=${cityId}`);\r\n  }\r\n  \r\n}\r\n\r\nexport default new AddressService();\r\n","import React from \"react\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport {\r\n  Elements,\r\n  CardElement,\r\n  useStripe,\r\n  useElements,\r\n} from \"@stripe/react-stripe-js\";\r\nimport axios from \"axios\";\r\nconst CheckoutForm = () => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n      type: \"card\",\r\n      card: elements.getElement(CardElement),\r\n    });\r\n\r\n    if (!error) {\r\n      const { id } = paymentMethod;\r\n\r\n      try {\r\n        const { data } = await axios.post(\"/api/charge\", { id, amount: 1099 });\r\n        console.log(data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit}\r\n      style={{ maxWidth: \"400px\", margin: \"0 auto\" }}\r\n    >\r\n      <h4>Price: 10$</h4>\r\n\r\n      <CardElement />\r\n      <button type=\"submit\" disabled={!stripe}>\r\n        Pay\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst stripePromise = loadStripe(\r\n  \"pk_test_51IYmp7KQZz31etWblogkjt7sWGcrG4viod9d40eJ4OrRyE18ZBC0HjKnfyYRt6QoRV0nv4EJYOWP7zC8r32ncYBj00fyRhj1WM\"\r\n);\r\n\r\nconst Index = () => {\r\n  const [status, setStatus] = React.useState(\"ready\");\r\n\r\n  if (status === \"success\") {\r\n    return <div>Congrats on your</div>;\r\n  }\r\n\r\n  return (\r\n    <Elements stripe={stripePromise}>\r\n      <CheckoutForm\r\n        success={() => {\r\n          setStatus(\"success\");\r\n        }}\r\n      />\r\n    </Elements>\r\n  );\r\n};\r\nexport default Index;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  DatePicker,\r\n  Select,\r\n  Button,\r\n  List,\r\n  Col,\r\n  message,\r\n  Row,\r\n  Card,\r\n} from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport moment from \"moment\";\r\n\r\nimport UserService from \"../services/user.service\";\r\nimport ScheduleService from \"../services/schedule.service\";\r\nimport StationService from \"../services/station.service\";\r\nimport CityService from \"../services/city.service\";\r\nimport AddressService from \"../services/address.service\";\r\n\r\nimport Index from \"./index\";\r\nconst { RangePicker } = DatePicker;\r\n// const { Option } = Select;\r\n\r\n//moment().format(\"YYYY-MM-DD[T]HH:mm:ss\"),\r\n//  moment().startOf(\"month\").utc(6).startOf(\"day\"),\r\nexport default class Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      content: \"\",\r\n      stationCities: [],\r\n      cities: [],\r\n      addressesFrom: [],\r\n      addressesTo: [],\r\n      filters: {},\r\n      date: \"\",\r\n      cityFrom: \"\",\r\n      cityTo: \"\",\r\n      scheduleItems: [],\r\n    };\r\n    this.onOkDatePicker = this.onOkDatePicker.bind(this);\r\n    this.onChangeCityFrom = this.onChangeCityFrom.bind(this);\r\n    this.onChangeAddressFrom = this.onChangeAddressFrom.bind(this);\r\n    this.onChangeCityTo = this.onChangeCityTo.bind(this);\r\n    this.onChangeAddressTo = this.onChangeAddressTo.bind(this);\r\n    this.onSearchSchedule = this.onSearchSchedule.bind(this);\r\n    this.onChangeDatePicker = this.onChangeDatePicker.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    UserService.getPublicContent().then(\r\n      (response) => {\r\n        this.setState({\r\n          content: response.data,\r\n        });\r\n      },\r\n      (error) => {\r\n        this.setState({\r\n          content:\r\n            (error.response && error.response.data) ||\r\n            error.message ||\r\n            error.toString(),\r\n        });\r\n      }\r\n    );\r\n\r\n    CityService.getCities().then(\r\n      (response) => {\r\n        this.setState({\r\n          cities: response.data,\r\n        });\r\n      },\r\n      (error) => {\r\n        this.setState({\r\n          content:\r\n            (error.response && error.response.data) ||\r\n            error.message ||\r\n            error.toString(),\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  onOkDatePicker(value) {\r\n    console.log(value);\r\n    this.setState({\r\n      filters: {\r\n        ...this.state.filters,\r\n        date: moment(value.toISOString())\r\n          .utc(6)\r\n          .format(\"YYYY-MM-DD[T]HH:mm:ss\"),\r\n      },\r\n    });\r\n  }\r\n  onChangeDatePicker(value, dateString) {\r\n    this.setState({\r\n      filters: {\r\n        ...this.state.filters,\r\n        date: dateString,\r\n      },\r\n    });\r\n  }\r\n\r\n  onChangeCityFrom(value) {\r\n    let cityId = this.state.cities.filter((e) => e.cityName == value)[0].id;\r\n    AddressService.getAddressByCity(cityId).then((response) => {\r\n      this.setState({\r\n        addressesFrom: response.data.map((e) => ({\r\n          id: e.id,\r\n          addressName: e.addressName,\r\n        })),\r\n      });\r\n    });\r\n    this.setState({\r\n      filters: { ...this.state.filters, cityFrom: value },\r\n    });\r\n  }\r\n  onChangeAddressFrom(value) {\r\n    this.setState({\r\n      filters: {\r\n        ...this.state.filters,\r\n        addressFrom: this.state.addressesFrom.filter(\r\n          (e) => e.addressName == value\r\n        )[0].id,\r\n      },\r\n    });\r\n  }\r\n\r\n  onChangeCityTo(value) {\r\n    let cityId = this.state.cities.filter((e) => e.cityName == value)[0].id;\r\n    AddressService.getAddressByCity(cityId).then((response) => {\r\n      this.setState({\r\n        addressesTo: response.data.map((e) => ({\r\n          id: e.id,\r\n          addressName: e.addressName,\r\n        })),\r\n      });\r\n    });\r\n    this.setState({\r\n      filters: { ...this.state.filters, cityTo: value },\r\n    });\r\n  }\r\n  onChangeAddressTo(value) {\r\n    this.setState({\r\n      filters: {\r\n        ...this.state.filters,\r\n        addressTo: this.state.addressesTo.filter(\r\n          (e) => e.addressName == value\r\n        )[0].id,\r\n      },\r\n    });\r\n  }\r\n\r\n  onSearchSchedule() {\r\n    const { filters } = this.state;\r\n    console.log(filters);\r\n    ScheduleService.getSchedule(filters).then(\r\n      (response) => {\r\n        console.log(response);\r\n        this.setState({\r\n          scheduleItems: response.data,\r\n        });\r\n      },\r\n      (error) => {\r\n        message.error(\"Please fill everything\");\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    this.state.cities.map((e, index) => console.log(e.cityName + \" \" + index));\r\n    console.log(this.state.addressesFrom);\r\n    console.log(this.state.addressesTo);\r\n    console.log(this.state.filters);\r\n    console.log(this.state.scheduleItems);\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"jumbotron\">\r\n          <h3>{this.state.content}</h3>\r\n\r\n          <Row>\r\n            <Col>\r\n              <Row>\r\n                <Select\r\n                  showSearch\r\n                  style={{ width: 200 }}\r\n                  placeholder=\"Select From City\"\r\n                  optionFilterProp=\"children\"\r\n                  onChange={this.onChangeCityFrom}\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                >\r\n                  {this.state.cities.map((e, index) => (\r\n                    <Select.Option key={e.id} value={e.cityName}>\r\n                      {e.cityName}\r\n                    </Select.Option>\r\n                  ))}\r\n                </Select>\r\n              </Row>\r\n              <Row>\r\n                <Select\r\n                  showSearch\r\n                  style={{ width: 200 }}\r\n                  placeholder=\"Select From Address\"\r\n                  optionFilterProp=\"children\"\r\n                  onChange={this.onChangeAddressFrom}\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                >\r\n                  {this.state.addressesFrom.map((e, index) => (\r\n                    <Select.Option key={e.id} value={e.addressName}>\r\n                      {e.addressName}\r\n                    </Select.Option>\r\n                  ))}\r\n                </Select>\r\n              </Row>\r\n            </Col>\r\n            <Col>\r\n              <Row>\r\n                <Select\r\n                  showSearch\r\n                  style={{ width: 200 }}\r\n                  placeholder=\"Select To City\"\r\n                  optionFilterProp=\"children\"\r\n                  onChange={this.onChangeCityTo}\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                >\r\n                  {this.state.cities.map((e, index) => (\r\n                    <Select.Option key={e.id} value={e.cityName}>\r\n                      {e.cityName}\r\n                    </Select.Option>\r\n                  ))}\r\n                </Select>\r\n              </Row>\r\n              <Row>\r\n                <Select\r\n                  showSearch\r\n                  style={{ width: 200 }}\r\n                  placeholder=\"Select To Address\"\r\n                  optionFilterProp=\"children\"\r\n                  onChange={this.onChangeAddressTo}\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                >\r\n                  {this.state.addressesTo.map((e, index) => (\r\n                    <Select.Option key={e.id} value={e.addressName}>\r\n                      {e.addressName}\r\n                    </Select.Option>\r\n                  ))}\r\n                </Select>\r\n              </Row>\r\n            </Col>\r\n\r\n            <DatePicker onChange={this.onChangeDatePicker} />\r\n            {/* <DatePicker\r\n              onChange={this.onChangeDatePicker}\r\n              showTime\r\n              // onChange={this.onChange}\r\n              format=\"YYYY-MM-DDTHH:mm\"\r\n              onOk={this.onOkDatePicker}\r\n              renderExtraFooter={() => <h5>Please press OK after choosing</h5>}\r\n            /> */}\r\n            <Button type=\"primary\" onClick={this.onSearchSchedule}>\r\n              Search\r\n            </Button>\r\n          </Row>\r\n          <Col>\r\n            <List\r\n              pagination={{\r\n                onChange: (page) => {\r\n                  console.log(page);\r\n                },\r\n                pageSize: 3,\r\n              }}\r\n              size=\"large\"\r\n              bordered\r\n              dataSource={this.state.scheduleItems}\r\n              renderItem={(item) => (\r\n                <List.Item>\r\n                  <Card style={{ width: 300 }}>\r\n                    <p>{item.scheduleStatus}</p>\r\n                    <p>{item.scheduleDate}</p>\r\n                    <p>{item.price}</p>\r\n                    <p>{item.routeDistance}</p>\r\n                    <p>{item.busStateNumber}</p>\r\n                    <p>{item.busAvailability}</p>\r\n                    <p>{item.busAvailableSeatNumber}</p>\r\n                    <p>{item.busModelName}</p>\r\n                    <p>{item.busModelSeatNumber}</p>\r\n                    <p>\r\n                      {item.addresses.map((element) => {\r\n                        return (\r\n                          <div>\r\n                            {element.addressName}, {element.sequenceNumber}\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </p>\r\n                  </Card>\r\n                  ,\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </Col>\r\n\r\n          <Index />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Profile extends Component {\r\n\r\n  render() {\r\n    const { user: currentUser } = this.props;\r\n\r\n    if (!currentUser) {\r\n      return <Redirect to=\"/login\" />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"jumbotron\">\r\n          <h3>\r\n            <strong>{currentUser.username}</strong> Profile\r\n          </h3>\r\n        </header>\r\n        <p>\r\n          <strong>Token:</strong> {currentUser.accessToken.substring(0, 20)} ...{\" \"}\r\n          {currentUser.accessToken.substr(currentUser.accessToken.length - 20)}\r\n        </p>\r\n        <p>\r\n          <strong>Id:</strong> {currentUser.id}\r\n        </p>\r\n        <p>\r\n          <strong>Email:</strong> {currentUser.email}\r\n        </p>\r\n        <strong>Authorities:</strong>\r\n        <ul>\r\n          {currentUser.roles &&\r\n            currentUser.roles.map((role, index) => <li key={index}>{role}</li>)}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { user } = state.auth;\r\n  return {\r\n    user,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Profile);\r\n","import React, { Component } from \"react\";\r\n\r\nimport UserService from \"../services/user.service\";\r\n\r\nexport default class BoardUser extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      content: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    UserService.getUserBoard().then(\r\n      response => {\r\n        this.setState({\r\n          content: response.data\r\n        });\r\n      },\r\n      error => {\r\n        this.setState({\r\n          content:\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString()\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"jumbotron\">\r\n          <h3>{this.state.content}</h3>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport UserService from \"../services/user.service\";\r\n\r\nexport default class BoardModerator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      content: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    UserService.getModeratorBoard().then(\r\n      response => {\r\n        this.setState({\r\n          content: response.data\r\n        });\r\n      },\r\n      error => {\r\n        this.setState({\r\n          content:\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString()\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"jumbotron\">\r\n          <h3>{this.state.content}</h3>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport UserService from \"../services/user.service\";\r\n\r\nexport default class BoardAdmin extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      content: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    UserService.getAdminBoard().then(\r\n      response => {\r\n        this.setState({\r\n          content: response.data\r\n        });\r\n      },\r\n      error => {\r\n        this.setState({\r\n          content:\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString()\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"jumbotron\">\r\n          <h3>{this.state.content}</h3>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { createBrowserHistory } from \"history\";\r\n\r\nexport const history = createBrowserHistory();\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nimport Login from \"./components/login.component\";\r\nimport Register from \"./components/register.component\";\r\nimport Home from \"./components/home.component\";\r\nimport Profile from \"./components/profile.component\";\r\nimport BoardUser from \"./components/board-user.component\";\r\nimport BoardModerator from \"./components/board-moderator.component\";\r\nimport BoardAdmin from \"./components/board-admin.component\";\r\n\r\nimport { logout } from \"./actions/auth\";\r\nimport { clearMessage } from \"./actions/message\";\r\n\r\nimport { history } from './helpers/history';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.logOut = this.logOut.bind(this);\r\n\r\n    this.state = {\r\n      showModeratorBoard: false,\r\n      showAdminBoard: false,\r\n      currentUser: undefined,\r\n    };\r\n\r\n    history.listen((location) => {\r\n      props.dispatch(clearMessage()); // clear message when changing location\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const user = this.props.user;\r\n\r\n    if (user) {\r\n      this.setState({\r\n        currentUser: user,\r\n        showModeratorBoard: user.roles.includes(\"ROLE_MODERATOR\"),\r\n        showAdminBoard: user.roles.includes(\"ROLE_ADMIN\"),\r\n      });\r\n    }\r\n  }\r\n\r\n  logOut() {\r\n    this.props.dispatch(logout());\r\n  }\r\n\r\n  render() {\r\n    const { currentUser, showModeratorBoard, showAdminBoard } = this.state;\r\n\r\n    return (\r\n      <Router history={history}>\r\n        <div>\r\n          <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n            <Link to={\"/\"} className=\"navbar-brand\">\r\n              BusSystem\r\n            </Link>\r\n            <div className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item\">\r\n                <Link to={\"/home\"} className=\"nav-link\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n\r\n              {showModeratorBoard && (\r\n                <li className=\"nav-item\">\r\n                  <Link to={\"/mod\"} className=\"nav-link\">\r\n                    Moderator Board\r\n                  </Link>\r\n                </li>\r\n              )}\r\n\r\n              {showAdminBoard && (\r\n                <li className=\"nav-item\">\r\n                  <Link to={\"/admin\"} className=\"nav-link\">\r\n                    Admin Board\r\n                  </Link>\r\n                </li>\r\n              )}\r\n\r\n              {currentUser && (\r\n                <li className=\"nav-item\">\r\n                  <Link to={\"/user\"} className=\"nav-link\">\r\n                    User\r\n                  </Link>\r\n                </li>\r\n              )}\r\n            </div>\r\n\r\n            {currentUser ? (\r\n              <div className=\"navbar-nav ml-auto\">\r\n                <li className=\"nav-item\">\r\n                  <Link to={\"/profile\"} className=\"nav-link\">\r\n                    {currentUser.username}\r\n                  </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <a href=\"/login\" className=\"nav-link\" onClick={this.logOut}>\r\n                    Log Out\r\n                  </a>\r\n                </li>\r\n              </div>\r\n            ) : (\r\n              <div className=\"navbar-nav ml-auto\">\r\n                <li className=\"nav-item\">\r\n                  <Link to={\"/login\"} className=\"nav-link\">\r\n                    Login\r\n                  </Link>\r\n                </li>\r\n\r\n                <li className=\"nav-item\">\r\n                  <Link to={\"/register\"} className=\"nav-link\">\r\n                    Sign Up\r\n                  </Link>\r\n                </li>\r\n              </div>\r\n            )}\r\n          </nav>\r\n\r\n          <div className=\"container mt-3\">\r\n            <Switch>\r\n              <Route exact path={[\"/\", \"/home\"]} component={Home} />\r\n              <Route exact path=\"/login\" component={Login} />\r\n              <Route exact path=\"/register\" component={Register} />\r\n              <Route exact path=\"/profile\" component={Profile} />\r\n              <Route path=\"/user\" component={BoardUser} />\r\n              <Route path=\"/mod\" component={BoardModerator} />\r\n              <Route path=\"/admin\" component={BoardAdmin} />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { user } = state.auth;\r\n  return {\r\n    user,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","import { SET_MESSAGE, CLEAR_MESSAGE } from \"./types\";\r\n\r\nexport const setMessage = (message) => ({\r\n  type: SET_MESSAGE,\r\n  payload: message,\r\n});\r\n\r\nexport const clearMessage = () => ({\r\n  type: CLEAR_MESSAGE,\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can chađinge\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}